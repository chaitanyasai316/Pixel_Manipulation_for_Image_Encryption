#include <stdio.h>
#include <stdlib.h>

// Structure to store RGB values for each pixel
typedef struct {
    unsigned char r, g, b;
} Pixel;

// Function to read BMP image file
Pixel* read_image(const char *filename, int *width, int *height, int *padding) {
    FILE *file = fopen(filename, "rb");
    if (!file) {
        fprintf(stderr, "Error: Unable to open file %s\n", filename);
        return NULL;
    }

    // Read BMP file header
    unsigned char header[54];
    fread(header, sizeof(unsigned char), 54, file);

    // Extract width, height from header
    *width = *(int*)&header[18];
    *height = *(int*)&header[22];

    // Calculate padding (BMP rows must be a multiple of 4 bytes)
    *padding = (*width * 3) % 4;

    // Allocate memory for image pixels
    Pixel *pixels = (Pixel*)malloc((*width) * (*height) * sizeof(Pixel));
    if (!pixels) {
        fprintf(stderr, "Error: Memory allocation failed.\n");
        fclose(file);
        return NULL;
    }

    // Read pixel data (consider padding)
    for (int i = 0; i < *height; i++) {
        fread(&pixels[i * (*width)], sizeof(Pixel), *width, file);
        fseek(file, *padding, SEEK_CUR);  // Skip padding bytes
    }

    fclose(file);
    return pixels;
}

// Function to write BMP image file
void write_image(const char *filename, const Pixel *pixels, int width, int height, int padding) {
    FILE *file = fopen(filename, "wb");
    if (!file) {
        fprintf(stderr, "Error: Unable to save file %s\n", filename);
        return;
    }

    // Create BMP file header
    unsigned char header[54] = {
        0x42, 0x4D, // Signature
        0, 0, 0, 0, // File size
        0, 0, 0, 0, // Reserved
        54, 0, 0, 0, // Data offset
        40, 0, 0, 0, // Header size
        0, 0, 0, 0, // Width
        0, 0, 0, 0, // Height
        1, 0, 24, 0, // Planes and bits per pixel
        0, 0, 0, 0, // Compression
        0, 0, 0, 0, // Image size
        0, 0, 0, 0, // Horizontal resolution
        0, 0, 0, 0, // Vertical resolution
        0, 0, 0, 0, // Number of colors
        0, 0, 0, 0  // Important colors
    };

    // Set width and height in the header
    *(int*)&header[18] = width;
    *(int*)&header[22] = height;

    // Write header and pixel data with padding
    fwrite(header, sizeof(unsigned char), 54, file);
    for (int i = 0; i < height; i++) {
        fwrite(&pixels[i * width], sizeof(Pixel), width, file);
        for (int j = 0; j < padding; j++) {
            fputc(0, file);  // Write padding bytes
        }
    }

    fclose(file);
}

// Function to encrypt or decrypt the image
void process_image(Pixel *pixels, int size, int key, int encrypt) {
    for (int i = 0; i < size; i++) {
        if (encrypt) {
            pixels[i].r = (pixels[i].r + key) % 256;
            pixels[i].g = (pixels[i].g + key) % 256;
            pixels[i].b = (pixels[i].b + key) % 256;
        } else {
            pixels[i].r = (pixels[i].r - key + 256) % 256;
            pixels[i].g = (pixels[i].g - key + 256) % 256;
            pixels[i].b = (pixels[i].b - key + 256) % 256;
        }
    }
}

int main() {
    int width, height, padding;
    const int key = 123;  // Encryption/Decryption key
    char choice;

    printf("Simple Image Encryption Tool\nChoose operation (E)ncrypt or (D)ecrypt: ");
    scanf(" %c", &choice);

    // Load the image
    Pixel *image = read_image("input_image.bmp", &width, &height, &padding);
    if (!image) {
        return EXIT_FAILURE;
    }

    int size = width * height;

    // Perform encryption or decryption
    if (choice == 'E' || choice == 'e') {
        process_image(image, size, key, 1);
        write_image("encrypted_image.bmp", image, width, height, padding);
        printf("Image encrypted and saved as 'encrypted_image.bmp'.\n");
    } else if (choice == 'D' || choice == 'd') {
        process_image(image, size, key, 0);
        write_image("decrypted_image.bmp", image, width, height, padding);
        printf("Image decrypted and saved as 'decrypted_image.bmp'.\n");
    } else {
        fprintf(stderr, "Invalid choice. Please choose 'E' or 'D'.\n");
    }

    free(image);
    return EXIT_SUCCESS;
}
